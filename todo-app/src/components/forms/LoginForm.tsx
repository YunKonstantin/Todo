import React, { useState, useCallback, useEffect } from "react";
import { useDispatch, useSelector } from "react-redux";
import { useNavigate } from "react-router-dom";
import { loginUser } from "../../store/slices/authSlice";
import type { AppDispatch, RootState } from "../../store";

export const LoginForm = () => {
  const dispatch = useDispatch<AppDispatch>();
  const navigate = useNavigate();
  const { status, error, user } = useSelector((state: RootState) => state.auth); // –î–æ–±–∞–≤—å—Ç–µ user

  const [formData, setFormData] = useState({
    email: "",
    password: "",
  });

  const [formErrors, setFormErrors] = useState({
    email: "",
    password: "",
  });

  const [isSubmitting, setIsSubmitting] = useState(false);

  // –î–æ–±–∞–≤—å—Ç–µ useEffect –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –≤—Ö–æ–¥–µ
  useEffect(() => {
    if (user) {
      console.log("üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É");
      navigate("/", { replace: true });
    }
  }, [user, navigate]);

  const validateForm = useCallback(() => {
    const newErrors = {
      email: "",
      password: "",
    };

    if (!formData.email) {
      newErrors.email = "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–¥—Ä–µ—Å —ç–ª. –ü–æ—á—Ç—ã";
    } else if (!/\S+@\S+\.\S+/.test(formData.email)) {
      newErrors.email = "–£–∫–∞–∑–∞–Ω–Ω–∞—è –ø–æ—á—Ç–∞ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç";
    }

    if (!formData.password) {
      newErrors.password = "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å";
    } else if (formData.password.length < 6) {
      newErrors.password = "–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–æ—Ä–æ—á–µ 6 —Å–∏–º–≤–æ–ª–æ–≤";
    }

    setFormErrors(newErrors);
    return !newErrors.email && !newErrors.password;
  }, [formData.email, formData.password]);

  const handleSubmit = useCallback(
    async (e: React.FormEvent) => {
      e.preventDefault();
      e.stopPropagation();

      console.log("üîÑ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ä–º—ã –ª–æ–≥–∏–Ω–∞");

      // –£—Å–∏–ª–µ–Ω–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫
      if (isSubmitting || status === "loading") {
        console.log("‚è∏Ô∏è –§–æ—Ä–º–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º");
        return;
      }

      if (!validateForm()) {
        console.log("‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞");
        return;
      }

      setIsSubmitting(true);
      console.log("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ª–æ–≥–∏–Ω–∞:", formData);

      try {
        const result = await dispatch(loginUser(formData));
        console.log("üì• –†–µ–∑—É–ª—å—Ç–∞—Ç –ª–æ–≥–∏–Ω–∞:", result);

        // –£–ë–ï–†–ò–¢–ï –Ω–∞–≤–∏–≥–∞—Ü–∏—é –æ—Ç—Å—é–¥–∞ - –æ–Ω–∞ –±—É–¥–µ—Ç –≤ useEffect
        if (loginUser.fulfilled.match(result)) {
          console.log("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ store");
          // navigate("/"); // –£–î–ê–õ–ò–¢–ï –≠–¢–£ –°–¢–†–û–ö–£
        } else {
          console.log("‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ match:");
        }
      } catch (error) {
        console.error("üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:", error);
      } finally {
        setIsSubmitting(false);
        console.log("üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ä–º—ã");
      }
    },
    [dispatch, formData, isSubmitting, status, validateForm]
  );

  const handleChange = useCallback(
    (e: React.ChangeEvent<HTMLInputElement>) => {
      const { name, value } = e.target;
      setFormData((prev) => ({
        ...prev,
        [name]: value,
      }));

      // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –≤–≤–æ–¥–µ
      if (formErrors[name as keyof typeof formErrors]) {
        setFormErrors((prev) => ({
          ...prev,
          [name]: "",
        }));
      }
    },
    [formErrors]
  );

  const isLoading = status === "loading" || isSubmitting;

  return (
    <form onSubmit={handleSubmit} className="auth-form">
      <h2>–í—Ö–æ–¥</h2>

      {error && <div className="error-message">{error}</div>}

      <div className="form-group">
        <label htmlFor="email">–ü–æ—á—Ç–∞:</label>
        <input
          type="email"
          id="email"
          name="email"
          value={formData.email}
          onChange={handleChange}
          required
          disabled={isLoading}
        />
        {formErrors.email && (
          <span className="field-error">{formErrors.email}</span>
        )}
      </div>

      <div className="form-group">
        <label htmlFor="password">–ü–∞—Ä–æ–ª—å:</label>
        <input
          type="password"
          id="password"
          name="password"
          value={formData.password}
          onChange={handleChange}
          required
          disabled={isLoading}
        />
        {formErrors.password && (
          <span className="field-error">{formErrors.password}</span>
        )}
      </div>

      <button type="submit" disabled={isLoading} className="submit-button">
        {isLoading ? "–í—Ö–æ–¥..." : "–í–æ–π—Ç–∏"}
      </button>
    </form>
  );
};

export default LoginForm;
